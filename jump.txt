import math
import numpy as np
from scipy.integrate import quad
# Model Parameters
S0 = 41.0 
K = 40.0 
T = 1.0 
r = 0.08 
sigma = 0.3
lamb = 1.0 # jump intensity 
mu = -0.2 # expected jump size
delta = 0.2 # jump size volatility

def call_price(S0, K, T, r, sigma, lamb, mu, delta):
    int_value = quad(lambda u: integration_function(u, S0, K, T, r,
                                                        sigma, lamb, mu, delta), 0, 50, limit=250)[0]
    call_value = S0 - np.exp(-r * T) * math.sqrt(S0 * K) / math.pi * int_value
    return call_value
def integration_function(u, S0, K, T, r, sigma, lamb, mu, delta):
    JDCF = characteristic_function(u - 0.5 * 1j, T, r,
                                       sigma, lamb, mu, delta)
    value = 1 / (u ** 2 + 0.25) * (np.exp(1j * u * math.log(S0 / K))
                                        * JDCF).real
    return value
def characteristic_function(u, T, r, sigma, lamb, mu, delta):
    omega = r - 0.5 * sigma ** 2 - lamb * (np.exp(mu + 0.5 * delta ** 2) - 1)
    value = np.exp((1j * u * omega - 0.5 * u ** 2 * sigma ** 2 +
                    lamb * (np.exp(1j * u * mu - u ** 2 * delta ** 2 * 0.5) - 1)) * T)
    return value

if __name__ == "__main__":
    print ("Value of Call Option:") 
    option_price = call_price(S0, K, T, r, sigma, lamb, mu, delta)
    print(option_price)
